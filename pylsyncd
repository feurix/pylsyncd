#!/usr/bin/env python

# (C) Copyright 2009 Ioannis Aslanidis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import Queue
import sys
import logging
import threading

from pylsyncd import *


# Function that explains how to use the script
def usage():
  print 'Use: %s <directory to watch> <rsync synchronization destinations>' \
      % (sys.argv[0],)
  print '''
  Examples:

      %s . srv2.example.com srv3.example.net srv4.example.org

        source = "." (current working directory)
        target = homedir of current user at remote servers
                 srv2.example.com, srv3.example.net and srv4.example.org
        method = rsync on top of remote shell protocoll, eg. rsh/ssh.


      %s /var/www www-data@srv2.example.com:/var/www

        source = /var/www
        target = /var/www at remote server srv2.example.com, user www-data
        method = rsync on top of remote shell protocoll, eg. rsh/ssh.


      %s /var/www srv2.example.com::webdata

        source = /var/www
        target = module webdata at remote server srv2.example.com
        method = rsync protocoll

  For more information on destination notation see man rsync(1).
  ''' % (sys.argv[0], sys.argv[0], sys.argv[0])


if len(sys.argv) < 3:
  usage()
  sys.exit()
logging.basicConfig(level=logging.DEBUG)
path = sys.argv[1]
servers = [Server(i) for i in sys.argv[2:]]
num_worker_threads = len(sys.argv) - 2
logging.debug('Total additional threads: %s' % num_worker_threads)

monitor = threading.Event() # Synchronize worker threads with Monitor

for server in servers:
  q = Queue.Queue(0) # infinite size
  queues.append(q)
  t = threading.Thread(target=worker, args=(monitor, q, path, server))
  t.setDaemon(True)
  t.start()

Monitor(monitor, path)

