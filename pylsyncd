#!/usr/bin/env python

# (C) Copyright 2009 Ioannis Aslanidis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import Queue
import sys
import logging
import threading

import pylsyncd

log = logging.getLogger("pylsyncd")

# Function that explains how to use the script
def usage():
  print 'Use: %s <directory to watch> <rsync synchronization destinations>' \
      % (sys.argv[0],)
  print '''
  Note: If the source path is "." or contains the virtual root marker "%s",
        then all remote target paths are rewritten to be relative to the
        specified virtual root.

  Examples:

      pylsyncd /tmp/source/./ /tmp/destination

        source = /tmp/source
        target = /tmp/destination (local machine), destination paths
                 are rewritten to be relative to the virtual root at
                 /tmp/source

      pylsyncd . srv2.example.com srv3.example.net srv4.example.org

        source = "." (current working directory)
        target = homedir of current user at remote servers
                 srv2.example.com, srv3.example.net and srv4.example.org,
                 remote paths are relative to the current dir
        method = rsync on top of remote shell protocoll, eg. rsh/ssh.

      pylsyncd /var/www www-data@srv2.example.com

        source = /var/www
        target = /var/www at remote server srv2.example.com, user www-data
        method = rsync on top of remote shell protocoll, eg. rsh/ssh.

      pylsyncd /var/www/./ www-data@srv2.example.com:/var/cluster/www

        source = /var/www
        target = /var/cluster/www at remote server srv2.example.com,
                 user www-data, remote paths start at /var/cluster/www
                 and are relative to local /var/www
        method = rsync on top of remote shell protocoll, eg. rsh/ssh.

      pylsyncd /var/www/./ srv2.example.com::webdata

        source = /var/www
        target = module webdata at remote server srv2.example.com,
                 remote paths are relative to local /var/www
        method = rsync protocoll

  For more information on destination notation see man rsync(1).
  ''' % pylsyncd.VIRTUAL_ROOT_MARKER


if len(sys.argv) < 3:
  usage()
  sys.exit()
source = pylsyncd.Source(sys.argv[1])
destinations = [pylsyncd.Destination(source, i) for i in sys.argv[2:]]
num_worker_threads = len(sys.argv) - 2
log.debug('Total additional threads: %s' % num_worker_threads)

monitor = threading.Event() # Synchronize worker threads with Monitor

for destination in destinations:
  q = Queue.Queue(0) # infinite size
  pylsyncd.queues.append(q)
  t = threading.Thread(target=pylsyncd.worker, args=(monitor, q, source, destination))
  t.setDaemon(True)
  t.start()

pylsyncd.Monitor(monitor, source)

