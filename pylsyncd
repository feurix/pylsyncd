#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2009 Ioannis Aslanidis <deathwing00@deathwing00.org>
# Copyright (C) 2009 John Feuerstein <john@feurix.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import Queue
import signal
import sys
import logging
import threading

import pylsyncd

from logging.handlers import SysLogHandler
from optparse import OptionParser

# Defaults
LOG_FORMAT_MSG = '%(asctime)s %(name)s[%(process)s]: %(message)s'
LOG_FORMAT_TIME = '%b %d %T'
LOG_FORMAT_MSG_DEBUG = '%(asctime)s %(name)s[%(process)s]' \
    + ' (%(filename)s:%(lineno).3d) [%(levelname)8s]: %(message)s'
LOG_FORMAT_TIME_DEBUG = '%T'
LOG_FORMAT_MSG_SYSLOG = '%(name)s[%(process)s]: %(message)s'

# Logging
log = logging.getLogger('pylsyncd')
log.setLevel(logging.WARNING)

# Option parsing
version = '%prog version 0.1'
usage = 'Usage: %prog [options] <directory to watch> <rsync destinations...>'

parser = OptionParser(usage=usage, version=version)

parser.add_option('-d', '--debug', action='store_true',
    dest='debug', help='Debug mode')
parser.add_option('-v', '--verbose', action='store_true',
    dest='verbose', help='Verbose mode')
parser.add_option('-q', '--quiet', action='store_true',
    dest='quiet', help='Only print errors')
parser.add_option('-n', '--dry-run', action='store_true',
    dest='dryrun', help='Simulate external command execution')
parser.add_option('-s', '--syslog', action='store_true',
    dest='syslog', help='Log to syslog')
parser.add_option('--syslog-facility', type='string', action='store',
    dest='syslog_facility', default='USER',
    help='Specify the syslog facility (Default: USER)')

(options, args) = parser.parse_args()

if len(args) < 2:
  parser.print_help()
  sys.exit(1)

if options.syslog and not options.debug:
  log_format = logging.Formatter(LOG_FORMAT_MSG_SYSLOG)
  log_handler = SysLogHandler('/dev/log', options.syslog_facility.lower())
  log_handler.setFormatter(log_format)
  log.addHandler(log_handler)
elif options.debug:
  log_format = logging.Formatter(LOG_FORMAT_MSG_DEBUG, LOG_FORMAT_TIME_DEBUG)
  log_handler = logging.StreamHandler()
  log_handler.setFormatter(log_format)
  log.addHandler(log_handler)
  log.setLevel(logging.DEBUG)
  pylsyncd.pyinotify.log.setLevel(logging.DEBUG)
else:
  log_format = logging.Formatter(LOG_FORMAT_MSG, LOG_FORMAT_TIME)
  log_handler = logging.StreamHandler()
  log_handler.setFormatter(log_format)
  log.addHandler(log_handler)

if not options.debug:
  if options.verbose:
    log.setLevel(logging.INFO)
  if options.quiet:
    log.setLevel(logging.ERROR)

# Signal handling
def signal_handler(signum, frame):
  if signum == signal.SIGINT:
    log.warning('Received SIGINT, exiting...')
    sys.exit(0)
  elif signum == signal.SIGHUP:
    log.warning('Received SIGHUP, forcing full synchronization...')
    # FIXME
  else:
    log.warning('Received signal number %d, exiting...' % signum)
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGHUP, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# Main script
log.warning('Starting up... (%s)' % parser.get_version())
pylsyncd.init(args[0], args[1:], dryrun=options.dryrun)
pylsyncd.loop()

